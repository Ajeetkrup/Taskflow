name: TaskFlow CI/CD Pipeline

on:
  push:
    branches: [ main, develop ]
  pull_request:
    branches: [ main ]

env:
  DOCKERHUB_USERNAME: ${{ secrets.DOCKERHUB_USERNAME }}
  AWS_REGION: ${{ secrets.AWS_REGION }}
  EKS_CLUSTER_NAME: ${{ secrets.EKS_CLUSTER_NAME }}

jobs:
  # Job 1: Run Tests with Redis and PostgreSQL
  test:
    runs-on: ubuntu-latest
    name: Run Tests
    
    services:
      postgres:
        image: postgres:17-alpine
        env:
          POSTGRES_USER: myuser
          POSTGRES_PASSWORD: mypassword
          POSTGRES_DB: taskflow
        ports:
          - 5432:5432
        options: >-
          --health-cmd pg_isready
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5
      
      redis:
        image: redis:7-alpine
        ports:
          - 6379:6379
        options: >-
          --health-cmd "redis-cli ping"
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      
    - name: Setup Node.js
      uses: actions/setup-node@v4
      with:
        node-version: '20'
        cache: 'npm'
        cache-dependency-path: |
          services/*/package-lock.json
          frontend/package-lock.json
    
    - name: Wait for services to be ready
      run: |
        echo "Waiting for PostgreSQL to be ready..."
        until pg_isready -h localhost -p 5432 -U myuser; do
          echo "PostgreSQL is unavailable - sleeping"
          sleep 1
        done
        echo "PostgreSQL is ready!"
        
        echo "Waiting for Redis to be ready..."
        until redis-cli -h localhost -p 6379 ping; do
          echo "Redis is unavailable - sleeping"
          sleep 1
        done
        echo "Redis is ready!"
    
    - name: Install PostgreSQL client
      run: |
        sudo apt-get update
        sudo apt-get install -y postgresql-client redis-tools
    
    - name: Verify database connection
      run: |
        PGPASSWORD=mypassword psql -h localhost -U myuser -d taskflow -c "SELECT version();"
        redis-cli -h localhost -p 6379 ping
    
    - name: Install dependencies and run tests
      # env:
      #   DATABASE_URL: postgresql://postgres:postgres@localhost:5432/taskflow
      #   REDIS_URL: redis://localhost:6379
      #   POSTGRES_HOST: localhost
      #   POSTGRES_PORT: 5432
      #   POSTGRES_USER: postgres
      #   POSTGRES_PASSWORD: postgres
      #   POSTGRES_DB: taskflow
      #   REDIS_HOST: localhost
      #   REDIS_PORT: 6379
      run: |
        # Test each service
        for service in services/*/; do
          if [ -f "$service/package.json" ]; then
            echo "Testing $(basename $service)..."
            cd $service
            npm install
            npm run test
            cd ../..
          fi
        done
        
        # Test frontend
        echo "Testing frontend..."
        cd frontend
        npm install
        npm run test
        cd ../..

  # Job 2: Build and Push All Images
  build:
    runs-on: ubuntu-latest
    needs: test
    if: github.ref == 'refs/heads/main'
    name: Build and Push All Images
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      
    - name: Login to DockerHub
      uses: docker/login-action@v3
      with:
        username: ${{ secrets.DOCKERHUB_USERNAME }}
        password: ${{ secrets.DOCKERHUB_TOKEN }}
    
    - name: Make build script executable
      run: chmod +x scripts/build-all.sh
    
    - name: Build and push all images
      run: ./scripts/build-all.sh

  # Job 3: Deploy to EKS
  deploy:
    runs-on: ubuntu-latest
    needs: build
    if: github.ref == 'refs/heads/main'
    name: Deploy to EKS
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      
    - name: Configure AWS credentials
      uses: aws-actions/configure-aws-credentials@v4
      with:
        aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
        aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
        aws-region: ${{ secrets.AWS_REGION }}
    
    - name: Update kubeconfig
      run: |
        aws eks update-kubeconfig --region ${{ secrets.AWS_REGION }} --name ${{ secrets.EKS_CLUSTER_NAME }}
    
    - name: Make deploy script executable
      run: chmod +x scripts/deploy-all.sh
    
    - name: Deploy all services to EKS
      run: ./scripts/deploy-all.sh
        
    - name: Deploy monitoring stack
      run: |
        echo "Deploying Grafana..."
        kubectl apply -f monitoring/grafana/
        
        echo "Deploying Prometheus..."
        kubectl apply -f monitoring/prometheus/
        
        echo "Waiting for monitoring deployments..."
        kubectl rollout status deployment/grafana --timeout=300s || true
        kubectl rollout status deployment/prometheus --timeout=300s || true
        
        echo "‚úÖ Deployment and monitoring setup completed successfully!"

  # Job 4: Notify on Success/Failure
  notify:
    runs-on: ubuntu-latest
    needs: [deploy]
    if: always()
    name: Notify Results
    
    steps:
    - name: Deployment Status
      run: |
        if [ "${{ needs.deploy.result }}" == "success" ]; then
          echo "üéâ Deployment successful!"
          echo "Application is available at: http://your-load-balancer-url"
          echo "Grafana dashboard: http://your-grafana-url"
          echo "Prometheus metrics: http://your-prometheus-url"
        else
          echo "‚ùå Deployment failed!"
          exit 1
        fi