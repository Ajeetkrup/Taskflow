name: TaskFlow CI/CD Pipeline

on:
  push:
    branches: [ main, develop ]
  pull_request:
    branches: [ main ]

env:
  DOCKERHUB_USERNAME: ${{ secrets.DOCKERHUB_USERNAME }}
  AWS_REGION: ${{ secrets.AWS_REGION }}
  EKS_CLUSTER_NAME: ${{ secrets.EKS_CLUSTER_NAME }}

jobs:
  # Job 1: Run Tests
  test:
    runs-on: ubuntu-latest
    name: Run Tests
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      
    - name: Setup Node.js
      uses: actions/setup-node@v4
      with:
        node-version: '20'
        cache: 'npm'
        cache-dependency-path: |
          services/*/package-lock.json
          frontend/package-lock.json
    
    - name: Install dependencies and run tests
      run: |
        # Test each service
        for service in services/*/; do
          if [ -f "$service/package.json" ]; then
            echo "Testing $(basename $service)..."
            cd $service
            npm install
            npm run test
            cd ../..
          fi
        done
        
        # Test frontend
        echo "Testing frontend..."
        cd frontend
        npm install
        npm run test
        cd ../..

  # Job 2: Build and Push Docker Images
  build:
    runs-on: ubuntu-latest
    needs: test
    if: github.ref == 'refs/heads/main'
    name: Build and Push Images
    
    strategy:
      matrix:
        service: [user-service, task-service, analytics-service, notification-service]
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      
    - name: Login to DockerHub
      uses: docker/login-action@v3
      with:
        username: ${{ secrets.DOCKERHUB_USERNAME }}
        password: ${{ secrets.DOCKERHUB_TOKEN }}
    
    - name: Build and push ${{ matrix.service }}
      run: |
        cd services/${{ matrix.service }}
        
        # Build image with commit SHA tag
        docker build -t ${{ secrets.DOCKERHUB_USERNAME }}/taskflow-${{ matrix.service }}:${{ github.sha }} .
        docker build -t ${{ secrets.DOCKERHUB_USERNAME }}/taskflow-${{ matrix.service }}:latest .
        
        # Push both tags
        docker push ${{ secrets.DOCKERHUB_USERNAME }}/taskflow-${{ matrix.service }}:${{ github.sha }}
        docker push ${{ secrets.DOCKERHUB_USERNAME }}/taskflow-${{ matrix.service }}:latest

  # Job 3: Build Frontend
  build-frontend:
    runs-on: ubuntu-latest
    needs: test
    if: github.ref == 'refs/heads/main'
    name: Build and Push Frontend
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      
    - name: Login to DockerHub
      uses: docker/login-action@v3
      with:
        username: ${{ secrets.DOCKERHUB_USERNAME }}
        password: ${{ secrets.DOCKERHUB_TOKEN }}
    
    - name: Build and push frontend
      run: |
        cd frontend
        
        # Build image
        docker build -t ${{ secrets.DOCKERHUB_USERNAME }}/taskflow-frontend:${{ github.sha }} .
        docker build -t ${{ secrets.DOCKERHUB_USERNAME }}/taskflow-frontend:latest .
        
        # Push images
        docker push ${{ secrets.DOCKERHUB_USERNAME }}/taskflow-frontend:${{ github.sha }}
        docker push ${{ secrets.DOCKERHUB_USERNAME }}/taskflow-frontend:latest

  # Job 4: Deploy to EKS
  deploy:
    runs-on: ubuntu-latest
    needs: [build, build-frontend]
    if: github.ref == 'refs/heads/main'
    name: Deploy to EKS
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      
    - name: Configure AWS credentials
      uses: aws-actions/configure-aws-credentials@v4
      with:
        aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
        aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
        aws-region: ${{ secrets.AWS_REGION }}
    
    - name: Update kubeconfig
      run: |
        aws eks update-kubeconfig --region ${{ secrets.AWS_REGION }} --name ${{ secrets.EKS_CLUSTER_NAME }}
    
    - name: Deploy services to EKS
      run: |
        # Update image tags in deployment files
        export IMAGE_TAG=${{ github.sha }}
        export DOCKERHUB_USERNAME=${{ secrets.DOCKERHUB_USERNAME }}
        
        # Deploy each service
        for service in user-service task-service analytics-service notification-service; do
          echo "Deploying $service..."
          envsubst < k8s/${service}-deployment.yaml | kubectl apply -f -
        done
        
        # Deploy frontend
        echo "Deploying frontend..."
        envsubst < k8s/frontend-deployment.yaml | kubectl apply -f -
        
        # Wait for deployments to be ready
        kubectl rollout status deployment/user-service --timeout=300s
        kubectl rollout status deployment/task-service --timeout=300s
        kubectl rollout status deployment/analytics-service --timeout=300s
        kubectl rollout status deployment/notification-service --timeout=300s
        kubectl rollout status deployment/taskflow-frontend --timeout=300s
        
        echo "✅ Deployment completed successfully!"

  # Job 5: Notify on Success/Failure
  notify:
    runs-on: ubuntu-latest
    needs: [deploy]
    if: always()
    name: Notify Results
    
    steps:
    - name: Deployment Status
      run: |
        if [ "${{ needs.deploy.result }}" == "success" ]; then
          echo "🎉 Deployment successful!"
          echo "Application is available at: http://your-load-balancer-url"
        else
          echo "❌ Deployment failed!"
          exit 1
        fi