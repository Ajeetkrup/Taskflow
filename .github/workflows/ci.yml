name: TaskFlow CI/CD Pipeline

on:
  push:
    branches: [ main, develop ]
  pull_request:
    branches: [ main ]

env:
  DOCKERHUB_USERNAME: ${{ secrets.DOCKERHUB_USERNAME }}
  AWS_REGION: ${{ secrets.AWS_REGION }}
  EKS_CLUSTER_NAME: ${{ secrets.EKS_CLUSTER_NAME }}

jobs:
  # Job 1: Run Tests with Redis and PostgreSQL
  test:
    runs-on: ubuntu-latest
    name: Run Tests
    
    services:
      postgres:
        image: postgres:17-alpine
        env:
          POSTGRES_USER: myuser
          POSTGRES_PASSWORD: mypassword
          POSTGRES_DB: taskflow
        ports:
          - 5432:5432
        options: >-
          --health-cmd pg_isready
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5
      
      redis:
        image: redis:7-alpine
        ports:
          - 6379:6379
        options: >-
          --health-cmd "redis-cli ping"
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      
    - name: Setup Node.js
      uses: actions/setup-node@v4
      with:
        node-version: '24'
        cache: 'npm'
        cache-dependency-path: |
          services/*/package-lock.json
          frontend/package-lock.json
    
    - name: Install PostgreSQL client and Redis tools
      run: |
        sudo apt-get update
        sudo apt-get install -y postgresql-client redis-tools
    
    - name: Wait for services to be ready
      run: |
        echo "Waiting for PostgreSQL to be ready..."
        timeout 60s bash -c 'until pg_isready -h localhost -p 5432 -U myuser; do
          echo "PostgreSQL is unavailable - sleeping"
          sleep 2
        done'
        echo "PostgreSQL is ready!"
        
        echo "Waiting for Redis to be ready..."
        timeout 60s bash -c 'until redis-cli -h localhost -p 6379 ping | grep -q PONG; do
          echo "Redis is unavailable - sleeping"
          sleep 2
        done'
        echo "Redis is ready!"
    
    - name: Verify database and Redis connections
      run: |
        echo "Testing PostgreSQL connection..."
        PGPASSWORD=mypassword psql -h localhost -U myuser -d taskflow -c "SELECT version();" || {
          echo "PostgreSQL connection failed"
          exit 1
        }
        
        echo "Testing Redis connection..."
        redis-cli -h localhost -p 6379 ping || {
          echo "Redis connection failed"
          exit 1
        }
        
        echo "Both services are accessible!"
    
    - name: Run database migrations (if needed)
      run: |
        # Create any required database schema/tables if your services need them
        echo "Setting up database schema..."
        # Add your migration commands here if needed
        # Example: PGPASSWORD=mypassword psql -h localhost -U myuser -d taskflow -f schema.sql
    
    - name: Install dependencies and run tests
      env:
        # Service environment variables matching your .env file
        PORT: 3001
        NODE_ENV: test
        JWT_SECRET: test-jwt-secret-key
        DB_HOST: localhost
        DB_PORT: 5432
        DB_NAME: taskflow
        DB_USER: myuser
        DB_PASSWORD: mypassword
        REDIS_HOST: localhost
        REDIS_PORT: 6379
        REDIS_PASSWORD: ""
        REDIS_DB: 0
        API_VERSION: v1
        API_PREFIX: /api
      run: |
        # Test each service
        for service in services/*/; do
          if [ -f "$service/package.json" ]; then
            echo "=================="
            echo "Testing $(basename $service)..."
            echo "=================="
            cd $service
            
            # Install dependencies
            npm ci
            
            # Run connection tests first
            echo "Testing database connection for $(basename $service)..."
            node -e "
              const { Pool } = require('pg');
              const redis = require('redis');
              
              async function testConnections() {
                try {
                  // Test PostgreSQL
                  const pool = new Pool({
                    host: process.env.DB_HOST,
                    port: process.env.DB_PORT,
                    database: process.env.DB_NAME,
                    user: process.env.DB_USER,
                    password: process.env.DB_PASSWORD,
                  });
                  
                  const pgResult = await pool.query('SELECT NOW()');
                  console.log('‚úÖ PostgreSQL connection successful:', pgResult.rows[0]);
                  await pool.end();
                  
                  // Test Redis
                  const redisClient = redis.createClient({
                    host: process.env.REDIS_HOST,
                    port: process.env.REDIS_PORT,
                    password: process.env.REDIS_PASSWORD || undefined,
                    db: process.env.REDIS_DB || 0
                  });
                  
                  await redisClient.connect();
                  const redisResult = await redisClient.ping();
                  console.log('‚úÖ Redis connection successful:', redisResult);
                  await redisClient.disconnect();
                  
                  console.log('‚úÖ All connections verified for $(basename $service)');
                } catch (error) {
                  console.error('‚ùå Connection test failed:', error.message);
                  process.exit(1);
                }
              }
              
              testConnections();
            " 2>/dev/null || echo "‚ö†Ô∏è  Connection test skipped (missing dependencies)"
            
            # Run actual tests
            echo "Running tests for $(basename $service)..."
            npm run test || {
              echo "‚ùå Tests failed for $(basename $service)"
              exit 1
            }
            
            echo "‚úÖ Tests completed for $(basename $service)"
            cd ../..
          fi
        done
        
        # Test frontend (usually doesn't need DB/Redis)
        echo "=================="
        echo "Testing frontend..."
        echo "=================="
        cd frontend
        npm ci
        npm run test || {
          echo "‚ùå Frontend tests failed"
          exit 1
        }
        echo "‚úÖ Frontend tests completed"
        cd ..
        
        echo "üéâ All tests completed successfully!"

  # Job 2: Build and Push All Images
  build:
    runs-on: ubuntu-latest
    needs: test
    if: github.ref == 'refs/heads/main'
    name: Build and Push All Images
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      
    - name: Login to DockerHub
      uses: docker/login-action@v3
      with:
        username: ${{ secrets.DOCKERHUB_USERNAME }}
        password: ${{ secrets.DOCKERHUB_TOKEN }}
    
    - name: Make build script executable
      run: chmod +x scripts/build-all.sh
    
    - name: Build and push all images
      run: ./scripts/build-all.sh

  # Job 3: Deploy to EKS
  deploy:
    runs-on: ubuntu-latest
    needs: build
    if: github.ref == 'refs/heads/main'
    name: Deploy to EKS
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      
    - name: Configure AWS credentials
      uses: aws-actions/configure-aws-credentials@v4
      with:
        aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
        aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
        aws-region: ${{ secrets.AWS_REGION }}
    
    - name: Update kubeconfig
      run: |
        aws eks update-kubeconfig --region ${{ secrets.AWS_REGION }} --name ${{ secrets.EKS_CLUSTER_NAME }}
    
    - name: Make deploy script executable
      run: chmod +x scripts/deploy-all.sh
    
    - name: Deploy all services to EKS
      run: ./scripts/deploy-all.sh
        
    - name: Deploy monitoring stack
      run: |
        echo "Deploying Grafana..."
        kubectl apply -f monitoring/grafana/
        
        echo "Deploying Prometheus..."
        kubectl apply -f monitoring/prometheus/
        
        echo "Waiting for monitoring deployments..."
        kubectl rollout status deployment/grafana --timeout=300s || true
        kubectl rollout status deployment/prometheus --timeout=300s || true
        
        echo "‚úÖ Deployment and monitoring setup completed successfully!"

  # Job 4: Notify on Success/Failure
  notify:
    runs-on: ubuntu-latest
    needs: [deploy]
    if: always()
    name: Notify Results
    
    steps:
    - name: Deployment Status
      run: |
        if [ "${{ needs.deploy.result }}" == "success" ]; then
          echo "üéâ Deployment successful!"
          echo "Application is available at: http://your-load-balancer-url"
          echo "Grafana dashboard: http://your-grafana-url"
          echo "Prometheus metrics: http://your-prometheus-url"
        else
          echo "‚ùå Deployment failed!"
          exit 1
        fi